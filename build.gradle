buildscript {
    ext.kotlin_version = '1.0.+'

    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

subprojects {
    repositories {
        maven {
            url 'https://dl.bintray.com/jetbrains-research/maven'
        }

        jcenter()
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'

    dependencies {
        compile 'com.google.code.gson:gson:2.6.+'
        compile 'com.google.guava:guava:19.0'
        compile 'com.intellij:annotations:12.0'
        compile 'net.sf.jopt-simple:jopt-simple:4.8'
        compile 'net.sf.trove4j:trove4j:3.0.3'
        compile 'org.apache.commons:commons-csv:1.1'
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        compile 'org.openjdk.jmh:jmh-core:1.11.+'
        compile 'org.openjdk.jmh:jmh-generator-annprocess:1.11.+'

        testCompile 'junit:junit:4.+'
        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    }

    tasks.withType(Test) {
        // Continue execution even if tests for some of the
        // sub-projects failed.
        ignoreFailures = true

        // XXX remove this once we switch to 'resources/' for test data.
        workingDir = new File("$rootDir")
        maxParallelForks = Runtime.runtime.availableProcessors()
        maxHeapSize = "1024m"
    }

    task generateTestOrganism(type: JavaExec) {
        description "Generates sequences/genes/etc for test organism"
        configure {
            main = "org.jetbrains.bio.util.TestOrganismDataGenerator"
            workingDir = rootProject.projectDir
            maxHeapSize = '1024M' // Not much RAM is available on TC agents
        }
    }
}

project(':browser-api') {
    dependencies {
        compile 'com.jidesoft:jide-oss:3.6.0'
        compile 'org.swinglabs.swingx:swingx-all:1.6.5-1'
        compile 'com.miglayout:miglayout-swing:4.2'
        compile 'javax.servlet:javax.servlet-api:3.1.+'
        compile 'org.eclipse.jetty:jetty-annotations:9.3.+'
        compile 'org.eclipse.jetty:jetty-server:9.3.+'

        compile project(':data')
        compile project(':util')
    }
}

project(':browser-tracks') {
    dependencies {
        compile project(':browser-api')
        compile project(':data')
    }
}

project(':data') {
    dependencies {
        compile 'log4j:log4j:1.2.+'
        compile 'com.github.samtools:htsjdk:2.1.+'
        compile 'org.jetbrains.bio:npy:0.2.+'
        compile 'org.jetbrains.bio:big:0.3.+'
        compile 'org.apache.httpcomponents:httpclient:4.2.+'
        compile 'com.esotericsoftware.yamlbeans:yamlbeans:1.+'
        compile 'org.jetbrains.bio:viktor:0.1.4'
        compile 'org.jetbrains.bio:npy:0.2.+'

        compile files("$rootDir/lib/yeppp-bundle-1.0.jar")
        compile files("$rootDir/lib/simd.jar",
                "$rootDir/lib/simd-sources.jar")

        compile project(':util')
    }
}


project(':cla') {
    dependencies {
        compile project(':browser-api')
        compile project(':browser-tracks')
    }
}

project(':util') {
    dependencies {
        compile 'log4j:log4j:1.2.+'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}
